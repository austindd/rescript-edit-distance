// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");

function levenshtein(word1, word2) {
  var m = word1.length;
  var n = word2.length;
  var cur = [];
  cur.length = m + 1 | 0;
  cur[0] = 0;
  for(var x = 1; x <= m; ++x){
    cur[x] = x;
  }
  for(var j = 1; j <= n; ++j){
    var pre = cur[0];
    cur[0] = j;
    for(var i = 1; i <= m; ++i){
      var temp = cur[i];
      var optChar1 = word1.codePointAt(i - 1 | 0);
      var optChar2 = word2.codePointAt(j - 1 | 0);
      if (optChar1 !== undefined && optChar2 !== undefined) {
        if (optChar1 === optChar2) {
          cur[i] = pre;
        } else {
          var a = cur[i] + 1 | 0;
          var b = cur[i - 1 | 0] + 1 | 0;
          var c = pre + 1 | 0;
          var min_ab = a < b ? a : b;
          cur[i] = min_ab < c ? min_ab : c;
        }
        pre = temp;
      } else {
        Pervasives.failwith("Assert: 'codePointAt(word)' is always 'Some(char)'");
      }
    }
  }
  return cur[m];
}

exports.levenshtein = levenshtein;
/* No side effect */
